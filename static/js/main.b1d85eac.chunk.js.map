{"version":3,"sources":["SortingVisualizer/MergesortAlgorithm.js","SortingVisualizer/QuicksortAlgorithm.js","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/BubbleSortAlgorithm.js","SortingVisualizer/InsertionSortAlgorithm.js","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Qsort","quickSort","auxillaryarray","startIndex","endIndex","pivotIndex","pivot","swap","partition","items","firstIndex","secondIndex","temp","SortingVisualizer","props","state","value","this","resetArray","min","max","random","setState","myanimations","arraybars","document","getElementsByClassName","setTimeout","a","c","style","height","b","barOneStyle","barTwoStyle","color","backgroundColor","bar1Style","bar2Style","inputArr","auxillary_arry","len","tmp","BSortHelper","auxiliary_array","BSort","auxillaryArray","n","key","isortHelper","console","log","insertionSort","isColorChange","arrayBars","barOneIndex","barTwoIndex","barIndex","newHeight","barStyle","className","map","idx","class","onClick","MergeSort","BubbleSort","QuickSort","InsertionSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1d85eac.chunk.js","sourcesContent":["export function mergeSort(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n    }\r\n    \r\n    function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n    ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n    }\r\n    \r\n    function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n    ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      \r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n    }","export function Qsort(array){\r\n    const animations = [];\r\n    const auxillaryarray = array.slice();\r\n\r\n    quickSort(auxillaryarray,0,array.length-1,animations);\r\n\r\n    return animations;\r\n\r\n    //console.log(animations);\r\n    \r\n}\r\n\r\nfunction quickSort(auxillaryarray,startIndex,endIndex,animations){\r\n\r\n    let pivotIndex;\r\n\r\n    if(startIndex<endIndex){\r\n\r\n        pivotIndex = partition(auxillaryarray,startIndex,endIndex,animations);\r\n        quickSort(auxillaryarray,startIndex,pivotIndex-1,animations);\r\n        quickSort(auxillaryarray,pivotIndex+1,endIndex,animations);\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction partition(auxillaryarray,startIndex,endIndex,animations){\r\n\r\n    let pivot = auxillaryarray[endIndex];\r\n    let pivotIndex = startIndex;\r\n\r\n    for(let i=startIndex;i<=endIndex-1;i++){\r\n\r\n        animations.push([i,endIndex]);\r\n        animations.push([i,endIndex]);\r\n\r\n        if(auxillaryarray[i]<=pivot){\r\n            animations.push([i,auxillaryarray[pivotIndex]]);\r\n            animations.push([pivotIndex,auxillaryarray[i]]);\r\n            swap(auxillaryarray,i,pivotIndex);\r\n            pivotIndex++;\r\n\r\n        }\r\n\r\n        else{\r\n\r\n            animations.push([-1,-1]);\r\n            animations.push([-1,-1]);\r\n\r\n        }\r\n\r\n        animations.push([-1,-1]);\r\n        animations.push([-1,-1]);\r\n\r\n    }\r\n\r\n    animations.push([-1,-1]);\r\n    animations.push([-1,-1]);\r\n    animations.push([-1,-1]);\r\n    animations.push([-1,-1]);\r\n\r\n    animations.push([pivotIndex,auxillaryarray[endIndex]]);\r\n    animations.push([endIndex,auxillaryarray[pivotIndex]]);\r\n\r\n\r\n    swap(auxillaryarray,pivotIndex,endIndex);\r\n\r\n\r\n    return pivotIndex;\r\n\r\n\r\n}\r\n\r\nfunction swap(items, firstIndex, secondIndex){\r\n  \r\n\r\n    let temp = items[firstIndex];\r\n    items[firstIndex] = items[secondIndex];\r\n    items[secondIndex] = temp;\r\n\r\n\r\n}\r\n\r\n\r\n","import React, {Component}from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {mergeSort} from './MergesortAlgorithm.js';\r\nimport {BSort} from './BubbleSortAlgorithm.js';\r\nimport {Qsort} from './QuicksortAlgorithm.js';\r\nimport {insertionSort} from './InsertionSortAlgorithm.js';\r\nimport Slider from 'react-rangeslider'\r\n \r\n// To include the default styles\r\nimport 'react-rangeslider/lib/index.css'\r\n\r\nconst SECONDARY_COLOR = \"orange\";\r\nconst PRIMARY_COLOR = \"aqua\";\r\n\r\n//const START_TIME = 0;\r\n//const END_TIME = 0;\r\n//const TIME_ELAPSED = 0;\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array:[],\r\n            value:200\r\n        };\r\n \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i=0;i<200;i++){\r\n            array.push(randomNumfromInterval(5,550));\r\n        }\r\n        this.setState({array})\r\n    }\r\n\r\n    MergeSort(){\r\n        //const testSortedarray = this.state.array.slice().sort((a,b)=>a-b);\r\n        const myanimations = mergeSort(this.state.array);\r\n\r\n        for(let i=0;i<myanimations.length;i++){\r\n            const arraybars = document.getElementsByClassName('arraybar');\r\n\r\n            const colorChange = i%3;\r\n            if(colorChange===0){\r\n                const[a,b]=myanimations[i];\r\n                const barOneStyle = arraybars[a].style; \r\n                const barTwoStyle = arraybars[b].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n            setTimeout(()=>{\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i*2);\r\n\r\n        }\r\n        else{\r\n\r\n           setTimeout(()=>{\r\n                const[a,c]=myanimations[i];\r\n                const barOneStyle = arraybars[a].style; \r\n                barOneStyle.height = `${c}px`;\r\n\r\n\r\n            },i*2);\r\n            continue;\r\n        }\r\n\r\n\r\n             \r\n        }\r\n\r\n    }\r\n\r\n    QuickSort(){\r\n\r\n        const myanimations = Qsort(this.state.array);\r\n        for(let i=0;i<myanimations.length;i++){\r\n            const arraybars = document.getElementsByClassName('arraybar');\r\n            const colorChange = i%6===0||i%6===1?0:1;\r\n            if(colorChange===0){\r\n\r\n                const[a,b]=myanimations[i];\r\n\r\n                if(a===-1){\r\n\r\n                    continue;\r\n                }\r\n\r\n                const bar1Style = arraybars[a].style;\r\n                const bar2Style = arraybars[b].style;\r\n\r\n                const color = i%6===0?SECONDARY_COLOR:PRIMARY_COLOR;\r\n                setTimeout(()=>{\r\n\r\n                    \r\n                    bar1Style.backgroundColor=color;\r\n                    bar2Style.backgroundColor=color;\r\n                \r\n\r\n                },i*2);\r\n            }\r\n            else{\r\n                const[a,b]=myanimations[i];\r\n\r\n                if(a===-1){\r\n                    continue;\r\n                }\r\n\r\n                else{\r\n               setTimeout(()=>{\r\n\r\n\r\n                    const bar1Style = arraybars[a].style;\r\n                    bar1Style.height = `${b}px`;\r\n                    }\r\n\r\n                ,i*2);\r\n            }\r\n\r\n            }\r\n        }\r\n        \r\n\r\n\r\n    }\r\n\r\n    BubbleSort(){\r\n\r\n        const myanimations = BSort(this.state.array);\r\n        for(let i=0;i<myanimations.length;i++){\r\n\r\n            \r\n            const arraybars = document.getElementsByClassName('arraybar');\r\n            const colorChange = i%4===0||i%4===1?0:1;\r\n            if(colorChange===0){\r\n\r\n                const[a,b]=myanimations[i];\r\n                const bar1Style = arraybars[a].style;\r\n                const bar2Style = arraybars[b].style;\r\n\r\n                const color = i%4===0?SECONDARY_COLOR:PRIMARY_COLOR;\r\n                setTimeout(()=>{\r\n                    bar1Style.backgroundColor=color;\r\n                    bar2Style.backgroundColor=color;\r\n                    \r\n\r\n                },i*2);\r\n            }\r\n            else{\r\n                const[a,b]=myanimations[i];\r\n\r\n                if(a===-1){\r\n                    continue;\r\n                }\r\n\r\n                else{\r\n               setTimeout(()=>{\r\n\r\n\r\n                    const bar1Style = arraybars[a].style;\r\n                    bar1Style.height = `${b}px`;\r\n                    }\r\n\r\n                ,i*2);\r\n            }\r\n\r\n            }\r\n        }\r\n\r\n        //console.log(myanimations);\r\n\r\n    }\r\n\r\n    SelectionSort(){\r\n\r\n    }\r\n\r\n    InsertionSort(){\r\n\r\n        const [animations,sortedArray] = insertionSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('arraybar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * 2);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * 2);  \r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        const {array}=this.state;\r\n\r\n\r\n        return(\r\n            <div className=\"arraycontainer\">\r\n                {array.map((value,idx) => (\r\n                    <div className=\"arraybar\" key={idx} style={{height: `${value}px`}}>\r\n                        \r\n                    </div>\r\n                ))}\r\n    <div class=\"buttoncontainer\">\r\n    <button class='button' onClick={()=>this.resetArray()}>Generate new array</button>\r\n    <button class='button' onClick={()=>this.MergeSort()}>Merge Sort</button>\r\n    <button class='button' onClick={()=>this.BubbleSort()}>Bubble Sort</button>\r\n    <button class='button' onClick={()=>this.QuickSort()}>Quick Sort</button>\r\n    <button class='button' onClick={()=>this.InsertionSort()}>Insertion Sort</button>\r\n    </div>\r\n    </div>\r\n        );\r\n                }\r\n\r\n}\r\nfunction randomNumfromInterval(min,max){\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\n","\r\nexport function BSort(inputArr){\r\n    const animations = [];\r\n\r\n    const auxiliary_array = inputArr.slice();\r\n\r\n    BSortHelper(inputArr, auxiliary_array, animations);\r\n\r\n    return animations;\r\n\r\n}\r\n\r\nfunction BSortHelper(inputArr, auxillary_arry, animations){\r\n\r\n  let len = inputArr.length;\r\n  let k=0;\r\n\r\n  for(let i=0;i<len-1;i++){\r\n    for (let j = 0; j < len-i-1; j++) {\r\n\r\n        animations.push([j,j+1]);\r\n        animations.push([j,j+1]);\r\n\r\n        if (inputArr[j] > inputArr[j + 1]) {\r\n\r\n            animations.push([j,inputArr[j+1]]);\r\n            animations.push([j+1,inputArr[j]]);\r\n\r\n            let tmp = inputArr[j];\r\n            inputArr[j] = inputArr[j + 1];\r\n            inputArr[j + 1] = tmp;\r\n        }    \r\n            else{\r\n\r\n              animations.push([-1,-1]);\r\n              animations.push([-1,-1]);\r\n\r\n            }\r\n        \r\n    \r\n}\r\n}\r\n\r\nreturn animations;\r\n\r\n\r\n}","export function insertionSort(array){\r\n   const auxillaryarray = array.slice();\r\n    const animations = [];\r\n    isortHelper(auxillaryarray,array.length,animations);\r\n\r\n    console.log(animations);\r\n    array = auxillaryarray;\r\n    return [animations, array];\r\n\r\n}\r\n\r\nfunction isortHelper(auxillaryArray,n,animations){\r\n    for (let i = 1; i < n; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}